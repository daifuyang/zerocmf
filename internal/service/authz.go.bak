package service

import (
	"strconv"
	"strings"
	"zerocmf/pkg/response"

	"github.com/gin-gonic/gin"
)

type authz struct {
	*Context
}

func NewAuthz(c *Context) *authz {
	return &authz{c}
}

// 查询对应的角色包含的权限
func (s *authz) Index(c *gin.Context) {
	roleId := c.Param("id")
	if strings.TrimSpace(roleId) == "" {
		response.Error(c, "参数错误："+roleId)
		return
	}

	roleIdInt, err := strconv.ParseInt(roleId, 10, 64)
	if err != nil {
		response.Error(c, err)
		return
	}

	ctx := c.Request.Context()

	// 判断当前角色是否存在
	_, err = s.rc.FindOne(ctx, roleIdInt)
	if err != nil {
		response.Error(c, err)
		return
	}

	response.Success(c, "获取成功！", nil)
}

// 辅助函数：检查切片中是否包含某个值
func contains(arr []string, val string) bool {
	for _, item := range arr {
		if item == val {
			return true
		}
	}
	return false
}

// 保存角色权限
func (s *authz) Save(c *gin.Context) {
	roleId := c.Param("id")
	if strings.TrimSpace(roleId) == "" {
		response.Error(c, "参数错误："+roleId)
		return
	}
	roleIdInt, err := strconv.ParseInt(roleId, 10, 64)
	if err != nil {
		response.Error(c, err)
		return
	}

	ctx := c.Request.Context()

	// 判断当前角色是否存在
	_, err = s.rc.FindOne(ctx, roleIdInt)
	if err != nil {
		response.Error(c, err)
		return
	}

	// 获取提交的权限列表
	var req struct {
		Access []string `json:"access"`
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		response.Error(c, err)
		return
	}

	// 传入的新规则
	newAccess := req.Access

	//获取原来的数据
	existAccess := make([]string, 0)
	permissions := s.e.GetPermissionsForUser(roleId)
	for _, permission := range permissions {
		existAccess = append(existAccess, permission[1])
	}

	// 如果不存在，则全部添加（首次添加）
	if len(existAccess) == 0 {
		for _, access := range newAccess {
			s.e.AddPermissionForUser(roleId, access)
		}
	} else if len(newAccess) == 0 {
		// 清空
		for _, access := range existAccess {
			s.e.DeletePermissionForUser(roleId, access)
		}
	} else {
		// 先找出需要删除的值
		for _, exist := range existAccess {
			if !contains(newAccess, exist) {
				s.e.DeletePermissionForUser(roleId, exist)
			}
		}

		// 再找出需要添加的值
		for _, new := range newAccess {
			if !contains(existAccess, new) {
				s.e.AddPermissionForUser(roleId, new)
			}
		}
	}

	response.Success(c, "操作成功！", req)
}
